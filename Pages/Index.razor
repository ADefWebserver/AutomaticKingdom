@page "/"
@using System.Net.Http
@using System.Threading.Tasks
@using Microsoft.JSInterop
@using System.Collections.Generic;
@using System.IO;
@using System.Linq;
@using AutomaticKingdom.Classes;
@using IronBlock
@using IronBlock.Blocks;
@using Microsoft.CodeAnalysis;
@using Microsoft.CodeAnalysis.CSharp.Scripting;
@using Microsoft.CodeAnalysis.Scripting;
@inject IJSRuntime JSRuntime

<h1>AutomaticKingdom.com</h1>

<button class="btn btn-primary" @onclick="GetXML" disabled="@ViewXML">
    XML
</button>
<button class="btn btn-primary" @onclick="GetCode" disabled="@ViewCode">
    C# Code
</button>
<button class="btn btn-primary" @onclick="Run" disabled="@ViewCode">
    Run
</button>
<div style="width: 100%">
    <div @ref="@blocklyDiv" style="display: inline-block; height: 480px; width: 100%"></div>
</div>

Output:
<pre>@Output</pre>


@if (ViewXML)
{
    <div class="modal" tabindex="-1" style="display:block;background-color:gainsboro" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">View XML</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <textarea disabled="disabled" style="display: inline-block; height: 480px; width: 100%;">@XMLText</textarea>
                </div>
            </div>
        </div>
    </div>
}

@if (ViewCode)
{
    <div class="modal" tabindex="-1" style="display:block;background-color:gainsboro" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">View Code</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <textarea disabled="disabled" style="display: inline-block; height: 480px; width: 100%;">@CodeText</textarea>
                </div>
            </div>
        </div>
    </div>
}

<!-- TOOLBOX -->
<xml xmlns="https://developers.google.com/blockly/xml" @ref="@toolbox" style="display: none">
    <category name="Logic" colour="%{BKY_LOGIC_HUE}">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
        <block type="logic_operation"></block>
        <block type="logic_negate"></block>
        <block type="logic_boolean"></block>
    </category>
    <category name="Loops" colour="%{BKY_LOOPS_HUE}">
        <block type="controls_repeat_ext">
            <value name="TIMES">
                <block type="math_number">
                    <field name="NUM">10</field>
                </block>
            </value>
        </block>
        <block type="controls_whileUntil"></block>
    </category>
    <category name="Math" colour="%{BKY_MATH_HUE}">
        <block type="math_number">
            <field name="NUM">123</field>
        </block>
        <block type="math_arithmetic"></block>
        <block type="math_single"></block>
    </category>
    <category name="Text" colour="%{BKY_TEXTS_HUE}">
        <block type="text"></block>
        <block type="text_length"></block>
        <block type="text_print"></block>
    </category>
    <sep></sep>
    <category name="Variables" custom="VARIABLE" colour="%{BKY_VARIABLES_HUE}">
    </category>
    <category name="Functions" custom="PROCEDURE" colour="%{BKY_PROCEDURES_HUE}">
    </category>
    <category name="Animations" colour="%{BKY_TEXTS_HUE}">
        <block type="automatickingdom_executeanimation">
            <field name="ExecuteAnimation">Execute Animation</field>
            <field name="AnimationSelection">TPose</field>
        </block>
    </category>
    <sep></sep>
</xml>

<!-- STARTING BLOCKS -->
<xml xmlns="https://developers.google.com/blockly/xml" @ref="@startBlocks" style="display: none">
    <variables>
        <variable id="`w[+P9?y!l7i@HJ,Bo(O">Animation</variable>
        <variable id="i{um2n^fiRJ,hZECOiq6">Iterations</variable>
    </variables>
    <block type="procedures_callnoreturn" id="7R.|fIN`F.p)O82}em/i" x="53" y="27">
        <mutation name="AnimationLoop">
            <arg name="Animation"></arg>
            <arg name="Iterations"></arg>
        </mutation>
        <value name="ARG0">
            <block type="text" id="$l$g_$lCqSMw^W(xFQ#A">
                <field name="TEXT">Running</field>
            </block>
        </value>
        <value name="ARG1">
            <block type="math_number" id="1H?!#[ih]b@4w;gezSF}">
                <field name="NUM">2</field>
            </block>
        </value>
    </block>
    <block type="procedures_defnoreturn" id="6G2xozHSpNx,H[1,b#Mb" x="50" y="130">
        <mutation>
            <arg name="Animation" varid="`w[+P9?y!l7i@HJ,Bo(O"></arg>
            <arg name="Iterations" varid="i{um2n^fiRJ,hZECOiq6"></arg>
        </mutation>
        <field name="NAME">AnimationLoop</field>
        <comment pinned="false" h="80" w="160">Describe this function...</comment>
        <statement name="STACK">
            <block type="controls_repeat_ext" id="NHaya^z2Ut~-5{B;*DNx">
                <value name="TIMES">
                    <block type="variables_get" id="JSGg7`Y7-05LBNf(@@c4^">
                        <field name="VAR" id="i{um2n^fiRJ,hZECOiq6">Iterations</field>
                    </block>
                </value>
                <statement name="DO">
                    <block type="controls_if" id="t.?mw!bbCm%)KYa[`[P?">
                        <mutation else="1"></mutation>
                        <value name="IF0">
                            <block type="logic_compare" id="A,=}KrPF9xCqCoDM(pyg">
                                <field name="OP">EQ</field>
                                <value name="A">
                                    <block type="variables_get" id="`8)Cz:fd@9,@@?7u%4!gB">
                                        <field name="VAR" id="`w[+P9?y!l7i@HJ,Bo(O">Animation</field>
                                    </block>
                                </value>
                                <value name="B">
                                    <block type="text" id="B:4}#VuuWlV%H;Bwtxt1">
                                        <field name="TEXT">Running</field>
                                    </block>
                                </value>
                            </block>
                        </value>
                        <statement name="DO0">
                            <block type="automatickingdom_executeanimation" id="W#*}TpY-;2`X-O{ecz*K">
                                <field name="ExecuteAnimation">Execute Animation</field>
                                <field name="AnimationSelection">Running</field>
                            </block>
                        </statement>
                        <statement name="ELSE">
                            <block type="automatickingdom_executeanimation" id="Et!rc/;E59X$MI-(Zr_T">
                                <field name="ExecuteAnimation">Execute Animation</field>
                                <field name="AnimationSelection">Idle</field>
                            </block>
                        </statement>
                    </block>
                </statement>
            </block>
        </statement>
    </block>
</xml>

@code {

    internal class CustomPrintBlock : IBlock
    {
        public List<string> Text { get; set; } = new List<string>();

        public override object Evaluate(Context context)
        {
            Text.Add((this.Values.FirstOrDefault(x => x.Name == "TEXT")?.Evaluate(context) ?? "").ToString());
            return base.Evaluate(context);
        }
    }

    private ElementReference blocklyDiv;
    private ElementReference toolbox;
    private ElementReference startBlocks;

    bool ViewXML = false;
    bool ViewCode = false;

    string XMLText = "";
    string CodeText = "";
    string Output = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Interop.DemoWorkspace(
                JSRuntime,
                blocklyDiv,
                toolbox,
                startBlocks
                );
        }
    }

    void ClosePopup()
    {
        // Close Popups
        ViewXML = false;
        ViewCode = false;
    }

    private async Task GetXML()
    {
        ViewXML = true;
        ViewCode = false;
        XMLText = await Interop.GetXML(JSRuntime);
    }

    private async Task GetCode()
    {
        ViewXML = false;
        ViewCode = true;
        CodeText = "";

        try
        {
            XMLText = await Interop.GetXML(JSRuntime);

            var parser = new Parser()
                .AddStandardBlocks()
                .AddBlock<ExecuteAnimation>("automatickingdom_executeanimation")
                .Parse(XMLText);

            var syntaxTree = parser.Generate();
            string code = syntaxTree.NormalizeWhitespace().ToFullString();
            var script = GenerateScript(code);

            CodeText = script.Code;
        }
        catch (Exception ex)
        {
            CodeText = "ERROR: " + ex.Message;
        }
    }

    private async Task Run()
    {
        this.Output = "";

        try
        {
            var xml = await Interop.GetXML(JSRuntime);

            var parser = new Parser()
                .AddStandardBlocks()
                .AddBlock<ExecuteAnimation>("automatickingdom_executeanimation")
                .Parse(XMLText);

            var syntaxTree = parser.Generate();

            string code = syntaxTree.NormalizeWhitespace().ToFullString();
            var script = GenerateScript(code);

            this.Output = "Compiling...";

            var diagnostics = Compile(script);
            this.Output = this.Output + " Compile result:";

            if (!diagnostics.Any())
            {
                this.Output = this.Output + " OK";
            }
            else
            {
                foreach (var diagnostic in diagnostics)
                {
                    this.Output = this.Output + " " + diagnostic.GetMessage();
                }
            }
        }
        catch (Exception ex)
        {
            this.Output = "ERROR: " + ex.Message;
        }
    }

    // Utility

    public static IEnumerable<Diagnostic> Compile(Script<object> script)
    {
        if (script == null)
            return Enumerable.Empty<Diagnostic>();

        try
        {
            return script.Compile();
        }
        catch (CompilationErrorException compilationErrorException)
        {
            return compilationErrorException.Diagnostics;
        }
    }

    public static Script<object> GenerateScript(string code)
    {
        var dynamicRuntimeReference = MetadataReference.CreateFromFile(typeof(System.Runtime.CompilerServices.DynamicAttribute).Assembly.Location);
        var runtimeBinderReference = MetadataReference.CreateFromFile(typeof(Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo).Assembly.Location);

        var scriptOptions =
        ScriptOptions.Default
            .WithImports("System", "System.Linq", "System.Math")
            .AddReferences(dynamicRuntimeReference, runtimeBinderReference);

        return CSharpScript.Create<object>(code, scriptOptions);
    }
}